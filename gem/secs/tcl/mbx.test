#!/bin/sh
# The next line restarts using tclsh\
exec tclsh $0 ${1+"$@"}

#initializatie
::tcl::tm::path add [file dirname [info script]]
package require tcltest
namespace import tcltest::*
package require Mbx

if {[catch {set mbxname $env(HOSTNAME)_mbx}]} {
	set mbxname [exec hostname]_mbx
}
mbx name $mbxname
mbx buffersize 64000

test mbx-1.1 {Test mbx buffersize} -body {
	mbx buffersize
} -result 64000

test mbx-1.2 {Test mbx buffersize 1} -body {
	mbx buffersize 1
} -result 64000

test mbx-1.3 {Test mbx buffersize 64000} -body {
	mbx buffersize 64000
} -result 64000

test mbx-1.4 {Test mbx buffersize too big} -body {
	mbx buffersize 64001
} -returnCodes 1 -result {invalid buffer size, must be between 0 and 64000}

test mbx-1.5 {Test mbx buffersize negative} -body {
	mbx buffersize -1
} -returnCodes 1 -result {invalid buffer size, must be between 0 and 64000}

test mbx-1.6 {Test mbx buffersize reset to default} -body {
	mbx buffersize 0
} -result 512

test mbx-1.7 {Test mbx delay} -body {
	mbx delay
} -result 100

test mbx-1.8 {Test mbx delay 200} -body {
	mbx delay 200
} -result 200

test mbx-1.9 {Test mbx delay (returns 200)} -body {
	mbx delay
} -result 200

test mbx-1.10 {Test mbx delay 0} -body {
	mbx delay 0
} -result 200

test mbx-1.11 {Test mbx delay 0} -body {
	mbx delay x
} -returnCodes 1 -result {expected integer but got "x"}

test mbx-2.1 {Test mbx name} -body {
	mbx name
} -result $mbxname

test mbx-2.2 {Test mbx name <name>} -body {
	mbx name $mbxname
} -result $mbxname

test mbx-3.1 {Test mbx invalid command} -body {
	mbx xxx
} -returnCodes 1 -match glob -result {*command "xxx": must be buffersize, delay, info, name, open, or version}

test mbx-3.2 {Test mbx without command} -body {
	mbx
} -returnCodes 1 -match glob -result {wrong # args: should be "mbx subcommand ?arg*...?"}

test mbx-3.3 {Test mbx version} -body {
	mbx version
} -match glob -result {*}

set result {}

namespace eval XXX {

	variable box [mbx open abcde]
	$box flush

	proc m args {
		global result
		variable box
		if {[lindex $args end] == $box} {
			$box send Reply
		}
		set result $args
	}

	test mbx-4.1 {Test mbx open with 1 additional args} -body {
		mbx open $box m
	} -result $box

	# See if $queue receive picks up the callback we set with open
	test mbx-4.2 {Test box receive} -body {
		$box receive
	} -result {m}

	test mbx-4.3 {Test mbx open with 2 additional args} -body {
		mbx open $box m ZZ
	} -result $box

	# See if $box receive picks up the callback we set with open
	test mbx-4.4 {Test box receive} -body {
		$box receive
	} -result {m ZZ}

	# Send with invalid replybox
	test mbx-4.5 {Test box send invalid replybox} -body {
		$box send XXX YYY
	} -returnCodes 1 -result {invalid replybox YYY: Unknown mailbox}

	# See if the send is not triggered in the foreground
	test mbx-4.6 {Test box send 1} -body {
		$box send XXX $box
		set result
	} -result {}

	# See if the send is triggered in the background
	test mbx-4.7 {Test box send 2} -body {
		set timer [after 1000 {set result Timeout}]
		vwait result
		after cancel $timer
		set result
	} -result [list ZZ XXX $box]

	# See if the receive callback is cleared
	test mbx-4.8 {Test box receive} -body {
		$box receive
	} -result {}

	# See if setting the receive callback again, receives the reply message
	test mbx-4.9 {Test box receive} -body {
		set timer [after 1000 {set result Timeout}]
		$box receive m YYY $box
		vwait result
		after cancel $timer
		set result
	} -result [list YYY $box Reply]

	test mbx-5.1 {Test box empty command} -body {
		$box
	} -returnCodes 1 -match glob -result "wrong # args: should be \"$box subcommand ?arg*..?\""

	test mbx-5.2 {Test box invalid command} -body {
		$box yyy
	} -returnCodes 1 -match glob -result {*command "yyy": must be close, flush, name, receive, or send}

	test mbx-5.3 {Command should not be defined in global namespace} -body {
		uplevel #0 ::$box
	} -returnCodes 1 -result "invalid command name \"::$box\""

	test mbx-6.1 {Test mbx info} -body {
		set info [mbx info]
		lindex $info [lsearch $info $box]
	} -result $box

	test mbx-6.2 "Test mbx info $box" -body {
		mbx info $box
	} -result $box

	test mbx-6.3 {Test box close} -body {
		$box close
		$box
	} -returnCodes 1 -result "invalid command name \"$box\""

}

# cleanup
cleanupTests
return
